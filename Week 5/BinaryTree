#include <iostream>
using namespace std;

// Define the structure for a node in the binary tree
struct Node {
    int data;
    Node* left;
    Node* right;

    // Constructor to create a new node
    Node(int value) {
        data = value;
        left = nullptr;
        right = nullptr;
    }
};

// BinaryTree class to manage tree operations
class BinaryTree {
public:
    Node* root;

    // Constructor to initialize the tree
    BinaryTree() {
        root = nullptr;
    }

    // Method to print tree in-order (just for visualization here)
    void inorder(Node* node) {
        if (node == nullptr) return;
        inorder(node->left);
        cout << node->data << " ";
        inorder(node->right);
    }
};

int main() {
    BinaryTree tree;

    // Manually creating nodes
    tree.root = new Node(1);        // Root node
    tree.root->left = new Node(2);  // Left child of root
    tree.root->right = new Node(3); // Right child of root
    
    tree.root->left->left = new Node(4);  // Left child of node 2
    tree.root->left->right = new Node(5); // Right child of node 2
    
    tree.root->right->left = new Node(6); // Left child of node 3
    tree.root->right->right = new Node(7); // Right child of node 3

    // Manually inserting nodes into the binary tree
    // You can set `left` and `right` pointers directly here to build the tree.

    // Print the tree in-order to check the structure
    cout << "In-order traversal: ";
    tree.inorder(tree.root); // Expected output: 4 2 5 1 6 3 7
    cout << endl;

    return 0;
}





















#include <iostream>
using namespace std;

template <typename T>
class Node{
public:
    T value;
    Node* left;
    Node* right;
    Node() {
        value = NULL;
        left = right = nullptr;
    }
    Node(T data) {
        value = data;
        left = right = nullptr;     
    }
};

template <typename T>
class BinaryTree {
public:
    Node<T>* root;

    BinaryTree() {
        root = nullptr;
    }

    void insertLeaves(T data, Node<T>*&root1) {
        Node<T>* temp = new Node<T>(data);
        if (root1 == nullptr) {
            root1 = temp;
        }
        else if (root1->left == nullptr) {
            root1->left = temp;
        }
        else if (root1->right == nullptr) {
            root1->right = temp;
        }
        else if(root1->left->left == nullptr || root1->left->right == nullptr){
            insertLeaves(data, root1->left);
        }
        else if (root1->right->left == nullptr || root1->right->right == nullptr) {
            insertLeaves(data, root1->right);
        }
        else {
            insertLeaves(data, root1->left);
        }
    }

    void deleteDeepest(Node<T>*& root1) {
        if (root1 == nullptr)return;
        if (root1->left == nullptr) root1 = nullptr;
        else { 
            deleteDeepest(root1->left);
            deleteDeepest(root1->right);
        }
    }

    void inOrder(Node<T>* node) {
        if (node == nullptr) {
            return;
        }
        else {
            inOrder(node->left);
            cout << node->value << " ";
            inOrder(node->right);
        }

    }
    void preOrder(Node<T>* node) {
        if (node == nullptr) {
            return;
        }
        else {
            cout << node->value << " ";
            preOrder(node->left);
            preOrder(node->right);
        }

    }

    void postOrder(Node<T>* node) {
        if (node == nullptr) {
            return;
        }
        else {
            postOrder(node->left);
            postOrder(node->right);
            cout << node->value << " ";
        }

    }


};

int main()
{
    std::cout << "---------- Binary Tree ----------"<<endl<<endl;

    BinaryTree<int> bt;
    bt.insertLeaves(10, bt.root);
    bt.insertLeaves(20, bt.root);
    bt.insertLeaves(30, bt.root);
    bt.insertLeaves(40, bt.root);
    bt.insertLeaves(50, bt.root);
    bt.insertLeaves(60, bt.root);
    bt.insertLeaves(70, bt.root);
    bt.insertLeaves(80, bt.root);
    bt.insertLeaves(90, bt.root);
    bt.insertLeaves(100, bt.root);
    bt.insertLeaves(110,bt.root);
    cout << "Inorder Traversal : " << endl;
    bt.inOrder(bt.root); cout << endl<<endl;
    cout << "Postorder Traversal : " << endl;
    bt.postOrder(bt.root); cout << endl << endl;
    cout << "Preorder Traversal : " << endl;
    bt.preOrder(bt.root);
    cout << endl << endl;

    return 0;
}







